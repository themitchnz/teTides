// Generated by CoffeeScript 1.3.3
var Feedr, balUtil, pathUtil,
  __hasProp = {}.hasOwnProperty;

balUtil = require('bal-util');

pathUtil = require('path');

Feedr = (function() {

  Feedr.prototype.config = {
    log: null,
    logError: null,
    tmpPath: null,
    cache: true,
    cacheTime: 1000 * 60 * 5,
    xmljsOptions: null
  };

  function Feedr(config) {
    this.config = balUtil.extend({}, this.config, config);
    this;

  }

  Feedr.prototype.readFeeds = function(feeds, next) {
    var failures, feedr, isArray, log, logError, result, tasks, _ref;
    feedr = this;
    _ref = this.config, log = _ref.log, logError = _ref.logError;
    failures = 0;
    isArray = balUtil.isArray(feeds);
    result = isArray ? [] : {};
    tasks = new balUtil.Group(function(err) {
      if (typeof log === "function") {
        log((failures ? 'warn' : 'debug'), 'Feedr finished fetching', (failures ? "with " + failures + " failures" : ''));
      }
      return next(err, result);
    });
    balUtil.each(feeds, function(feedDetails, feedName) {
      return tasks.push(function(complete) {
        var _ref1;
        if (balUtil.isString(feedDetails)) {
          feedDetails = {
            url: feedDetails
          };
        }
        if ((_ref1 = feedDetails.name) == null) {
          feedDetails.name = feedName;
        }
        return feedr.readFeed(feedDetails, function(err, data) {
          if (err) {
            if (typeof log === "function") {
              log('debug', "Feedr failed to fetch [" + feedDetails.url + "] to [" + feedDetails.path + "]");
            }
            if (typeof logError === "function") {
              logError(err);
            }
            ++failures;
          } else {
            if (isArray) {
              result.push(data);
            } else {
              result[feedName] = data;
            }
          }
          return complete();
        });
      });
    });
    if (feedr.config.tmpPath) {
      tasks.async();
    } else {
      balUtil.getTmpPath(function(err, tmpPath) {
        if (err) {
          return next(err);
        }
        feedr.config.tmpPath = tmpPath;
        return tasks.async();
      });
    }
    return this;
  };

  Feedr.prototype.readFeed = function(feedDetails, next) {
    var cache, cacheTime, cleanData, feedr, log, tmpPath, viaCache, viaRequest, writeFeed, xml2jsOptions, _ref, _ref1, _ref2, _ref3;
    feedr = this;
    if (!feedr.config.tmpPath) {
      balUtil.getTmpPath(function(err, tmpPath) {
        if (err) {
          return next(err);
        }
        feedr.config.tmpPath = tmpPath;
        return feedr.readFeed(feedDetails, next);
      });
      return this;
    }
    _ref = this.config, log = _ref.log, tmpPath = _ref.tmpPath, cacheTime = _ref.cacheTime, cache = _ref.cache, xml2jsOptions = _ref.xml2jsOptions;
    if (balUtil.isString(feedDetails)) {
      feedDetails = {
        url: feedDetails,
        name: feedDetails
      };
    }
    if ((_ref1 = feedDetails.hash) == null) {
      feedDetails.hash = require('crypto').createHash('md5').update("feedr-" + JSON.stringify(feedDetails.url)).digest('hex');
    }
    if ((_ref2 = feedDetails.path) == null) {
      feedDetails.path = pathUtil.join(tmpPath, feedDetails.hash);
    }
    if ((_ref3 = feedDetails.name) == null) {
      feedDetails.name = feedDetails.hash;
    }
    cleanData = function(data) {
      var key, keys, value;
      keys = [];
      for (key in data) {
        if (!__hasProp.call(data, key)) continue;
        value = data[key];
        if (balUtil.isPlainObject(data)) {
          data[key] = cleanData(value);
        }
        keys.push(key);
      }
      if (keys.length === 1 && keys[0] === '_content') {
        data = data._content;
      }
      return data;
    };
    writeFeed = function(data) {
      return balUtil.writeFile(feedDetails.path, JSON.stringify(data), function(err) {
        if (err) {
          return next(err);
        }
        return next(null, data);
      });
    };
    viaCache = function() {
      if (typeof log === "function") {
        log('debug', "Feedr fetched [" + feedDetails.url + "] from cache");
      }
      return balUtil.exists(feedDetails.path, function(exists) {
        if (!exists) {
          return next();
        }
        return balUtil.readFile(feedDetails.path, function(err, dataBuffer) {
          var data;
          if (err) {
            return next(err);
          }
          data = JSON.parse(dataBuffer.toString());
          return next(null, data);
        });
      });
    };
    viaRequest = function() {
      if (typeof log === "function") {
        log('debug', "Feedr is fetching [" + feedDetails.url + "] to [" + feedDetails.path + "]");
      }
      return balUtil.readPath(feedDetails.url, function(err, data) {
        var body, parser, xml2js;
        if (err) {
          return viaCache();
        }
        body = data.toString().trim();
        if (/^</.test(body)) {
          xml2js = require('xml2js');
          if (balUtil.isString(xml2jsOptions)) {
            xml2jsOptions = xml2js.defaults[xml2jsOptions];
          }
          parser = new xml2js.Parser(xml2jsOptions);
          parser.on('end', function(data) {
            return writeFeed(data);
          });
          try {
            return parser.parseString(body);
          } catch (err) {
            if (err) {
              return next(err);
            }
          }
        } else {
          try {
            body = body.replace(/^[a-z0-9]+/gi, '').replace(/^\(|\)$/g, '');
            return data = JSON.parse(body);
          } catch (err) {
            try {
              body = body.replace(/\\'/g, "'");
              return data = JSON.parse(body);
            } catch (err) {
              if (err) {
                return next(err);
              }
            }
          } finally {
            if (feedDetails.clean) {
              if (typeof log === "function") {
                log('debug', "Feedr is cleaning data from [" + feedDetails.url + "]");
              }
              data = cleanData(data);
            }
            writeFeed(data);
          }
        }
      });
    };
    if (cache === false) {
      viaRequest();
    } else {
      balUtil.isPathOlderThan(feedDetails.path, cacheTime, function(err, older) {
        if (err) {
          return next(err);
        }
        if (older === null || older === true) {
          return viaRequest();
        } else {
          return viaCache();
        }
      });
    }
    return this;
  };

  return Feedr;

})();

module.exports = {
  Feedr: Feedr
};
